// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package query_collection

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const assignTask = `-- name: AssignTask :exec
UPDATE tasks
SET assigned_to_user_id = $2
WHERE ID = $1
RETURNING id, title, description, created_by_user_id, assigned_to_user_id, created_at, updated_at
`

type AssignTaskParams struct {
	ID               int64
	AssignedToUserID pgtype.Int8
}

func (q *Queries) AssignTask(ctx context.Context, arg AssignTaskParams) error {
	_, err := q.db.Exec(ctx, assignTask, arg.ID, arg.AssignedToUserID)
	return err
}

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
    title, description, created_by_user_id, assigned_to_user_id
) VALUES (
    $1, $2, $3, $4
) RETURNING id, title, description, created_by_user_id, assigned_to_user_id, created_at, updated_at
`

type CreateTaskParams struct {
	Title            string
	Description      string
	CreatedByUserID  int64
	AssignedToUserID pgtype.Int8
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.Title,
		arg.Description,
		arg.CreatedByUserID,
		arg.AssignedToUserID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedByUserID,
		&i.AssignedToUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  name, email, bio
) VALUES (
  $1, $2, $3
)
RETURNING id, name, email, bio, created_at
`

type CreateUserParams struct {
	Name  string
	Email string
	Bio   pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Email, arg.Bio)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Bio,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE ID = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTask, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE ID = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getAssignedTasks = `-- name: GetAssignedTasks :many
SELECT id, title, description, created_by_user_id, assigned_to_user_id, created_at, updated_at FROM tasks 
WHERE assigned_to_user_id = $1 
ORDER BY created_at DESC
`

func (q *Queries) GetAssignedTasks(ctx context.Context, assignedToUserID pgtype.Int8) ([]Task, error) {
	rows, err := q.db.Query(ctx, getAssignedTasks, assignedToUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedByUserID,
			&i.AssignedToUserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCreatedTasks = `-- name: GetCreatedTasks :many
SELECT id, title, description, created_by_user_id, assigned_to_user_id, created_at, updated_at FROM tasks
WHERE created_by_user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetCreatedTasks(ctx context.Context, createdByUserID int64) ([]Task, error) {
	rows, err := q.db.Query(ctx, getCreatedTasks, createdByUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedByUserID,
			&i.AssignedToUserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTask = `-- name: GetTask :one
SELECT id, title, description, created_by_user_id, assigned_to_user_id, created_at, updated_at FROM tasks
WHERE ID = $1 LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRow(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedByUserID,
		&i.AssignedToUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, email, bio, created_at FROM users
WHERE ID = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Bio,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, bio, created_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Bio,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, bio, created_at FROM users
ORDER BY name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Bio,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
  set name = $2,
  email = $3,
  bio = $4
WHERE ID = $1
RETURNING id, name, email, bio, created_at
`

type UpdateUserParams struct {
	ID    int64
	Name  string
	Email string
	Bio   pgtype.Text
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Bio,
	)
	return err
}
